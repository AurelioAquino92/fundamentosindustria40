# -*- coding: utf-8 -*-
"""Atividade 1 - Fundamentos da Industria 4.0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QlY8QhkEzSJ1fv8cISf8t-tVWSUZB-EM

# Módulos Python
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import datetime as dt
from datetime import datetime
from sklearn.metrics import r2_score, mean_squared_error, mean_absolute_error
from sklearn.model_selection import train_test_split

"""# Extração - Carregar Base
"""

data = pd.read_csv('Steel_industry_data.csv')

"""# Tratamento

## Converter dados para formato numérico
"""

data['Usage_kWh'] = pd.to_numeric(data['Usage_kWh'])
data['Lagging_Current_Reactive.Power_kVarh'] = pd.to_numeric(data['Lagging_Current_Reactive.Power_kVarh'])
data['Leading_Current_Reactive_Power_kVarh'] = pd.to_numeric(data['Leading_Current_Reactive_Power_kVarh'])
data['CO2(tCO2)'] = pd.to_numeric(data['CO2(tCO2)'])
data['Lagging_Current_Power_Factor'] = pd.to_numeric(data['Lagging_Current_Power_Factor'])
data['Leading_Current_Power_Factor'] = pd.to_numeric(data['Leading_Current_Power_Factor'])
data['NSM'] = pd.to_numeric(data['NSM'])

"""## Usar datetime (tempo) com index dos dados do dataset"""

data = data.set_index("date")
data.index = pd.to_datetime(data.index)

"""## Converter Dados Categóricos em dados Numerais"""

data['WeekStatus'].replace(['Weekday', 'Weekend'], [0, 1], inplace=True)
data['Day_of_week'].replace(['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'], [0, 1,2,3,4,5,6], inplace=True)
data['Load_Type'].replace(['Light_Load', 'Medium_Load', 'Maximum_Load'], [0,1,2], inplace=True)

"""## Apagar dados faltantes"""

data = data.dropna()

"""# Data Visualization

## Correlação apenas do uso de Energia
"""

correlation_mat = data.corr()
correlation_Usage = correlation_mat['Usage_kWh'].sort_values(ascending=False)[1:]
correlation_Usage

correlation_Usage.plot(kind='bar', fontsize='12')

"""## Visulização do Consumo de Energia em Relação aos Outros Dados"""

hor_size = 20
ver_size = 5
fig, axes = plt.subplots(nrows=3, ncols=1, figsize=(hor_size, ver_size))
data['Leading_Current_Reactive_Power_kVarh'].plot(ax = axes[0], style = '-', color = 'blue', fontsize='12', sharex=True)
data['CO2(tCO2)'].plot(ax = axes[1], style = '-', color = 'blue', fontsize='12', sharex=True)
data['Usage_kWh'].plot(ax = axes[2], style = '-', color = 'blue', fontsize='12', sharex=True)
# plt.xlim(pd.to_datetime("2018-01"),pd.to_datetime("2018-07-15"))
axes[0].legend(['Leading_Current_Reactive_Power_kVarh (Pior correlação)'])
axes[1].legend(['CO2 (tCO2) (Melhor correlação)'])
axes[2].legend(['Energia Consumida (kWh)'])

"""# Dividir conjuntos para treinamento e testes

## Seleciona os 3 campos com melhor correlação
"""

melhores_correlacoes = correlation_Usage.index.values[:3]
melhores_correlacoes

X = data[melhores_correlacoes]
y = data['Usage_kWh']
X = X.values
y = y.values
x_train, x_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 10, shuffle = False)

"""## Visualiza dados de Treino e Teste"""

hor_size = 20
ver_size = 5
fig, axes = plt.subplots(nrows=2, ncols=1, figsize=(hor_size, ver_size))
axes[0].plot(y_train)
axes[1].plot(y_test)
axes[0].legend(['Train Set'])
axes[1].legend(['Test Set'])

"""# Implementação dos Modelos de Aprendizado

### Modelos (Regressão Linear, SVR e Rede Neural)
"""

from sklearn.linear_model import LinearRegression
from sklearn.svm import SVR
from sklearn.neural_network import MLPRegressor

modelos = [
  LinearRegression().fit(x_train, y_train),
  SVR().fit(x_train, y_train),
  MLPRegressor(random_state=1, max_iter=500, verbose=True).fit(x_train, y_train)
]

"""### Predições e Métricas"""

resultados = pd.DataFrame()
for modelo in modelos:
  resultado = {}
  resultado['Modelo'] = type(modelo).__name__

  # previsões dos dados de treino
  y_train_pred = modelo.predict(x_train)
  resultado['R2_Train'] = r2_score(y_train, y_train_pred)
  resultado['MSE_Train'] = mean_squared_error(y_train, y_train_pred)
  resultado['MAE_Train'] = mean_absolute_error(y_train, y_train_pred)

  # previsões dos dados de teste
  y_test_pred = modelo.predict(x_test)
  resultado['R2_Test'] = r2_score(y_test, y_test_pred)
  resultado['MSE_Test'] = mean_squared_error(y_test, y_test_pred)
  resultado['MAE_Test'] = mean_absolute_error(y_test, y_test_pred)

  resultados = pd.concat([resultados, pd.DataFrame([resultado])])

"""### Resultados"""

print(resultados)

"""# Avaliação dos Resultados Preditos (PS: Os gráficos estão sem dados temporais no eixo "X")

## Avaliação das Métricas dos Modelos Testados

### Métrica R2 (Quanto maior melhor)
"""

graficoResultados = resultados.sort_values(by='R2_Test', ascending=False).set_index('Modelo')
graficoResultados[['R2_Test', 'R2_Train']].plot(kind='bar')

"""### Métrica MSE"""

graficoResultados = resultados.sort_values(by='MSE_Test').set_index('Modelo')
graficoResultados[['MSE_Test', 'MSE_Train']].plot(kind='bar')

"""### Métrica MAE"""

graficoResultados = resultados.sort_values(by='MAE_Test').set_index('Modelo')
graficoResultados[['MAE_Test', 'MAE_Train']].plot(kind='bar')

"""## Gráfico dos Resultados do Melhor Modelo"""

idx_modelo_escolhido = 0

y_train_pred = modelos[idx_modelo_escolhido].predict(x_train)
y_test_pred = modelos[idx_modelo_escolhido].predict(x_test)

hor_size = 20
ver_size = 5
fig, axes = plt.subplots(nrows=2, ncols=1, figsize=(hor_size, ver_size))
axes[0].plot(y_train, color = 'red', linewidth=2.0, alpha = 0.6)
axes[0].plot(y_train_pred, color = 'blue', linewidth=0.8)
axes[1].plot(y_test, color = 'red', linewidth=2.0, alpha = 0.6)
axes[1].plot(y_test_pred, color = 'blue', linewidth=0.8)

axes[0].legend(['Dados de Treino', 'Previsão'])
axes[1].legend(['Dados de Teste', 'Previsão'])